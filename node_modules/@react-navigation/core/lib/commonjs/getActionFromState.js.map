{"version":3,"sources":["getActionFromState.tsx"],"names":["getActionFromState","state","options","normalizedConfig","createNormalizedConfigItem","routes","index","slice","length","undefined","name","initialRouteName","type","payload","route","current","config","screens","params","initial","screen","key","createNormalizedConfigs","Object","entries","reduce","acc","k","v"],"mappings":"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","sourcesContent":["import type {\n  Route,\n  PartialRoute,\n  NavigationState,\n  PartialState,\n  CommonActions,\n} from '@react-navigation/routers';\nimport type { PathConfig, PathConfigMap, NestedNavigateParams } from './types';\n\ntype ConfigItem = {\n  initialRouteName?: string;\n  screens?: Record<string, ConfigItem>;\n};\n\ntype Options = { initialRouteName?: string; screens: PathConfigMap };\n\ntype NavigateAction<State extends NavigationState> = {\n  type: 'NAVIGATE';\n  payload: {\n    name: string;\n    params?: NestedNavigateParams<State>;\n  };\n};\n\nexport default function getActionFromState(\n  state: PartialState<NavigationState>,\n  options?: Options\n): NavigateAction<NavigationState> | CommonActions.Action | undefined {\n  // Create a normalized configs object which will be easier to use\n  const normalizedConfig = options ? createNormalizedConfigItem(options) : {};\n\n  const routes =\n    state.index != null ? state.routes.slice(0, state.index + 1) : state.routes;\n\n  if (routes.length === 0) {\n    return undefined;\n  }\n\n  if (\n    !(\n      routes.length === 1 ||\n      (routes.length === 2 &&\n        routes[0].name === normalizedConfig?.initialRouteName)\n    )\n  ) {\n    return {\n      type: 'RESET',\n      payload: state,\n    };\n  }\n\n  const route = state.routes[state.index ?? state.routes.length - 1];\n\n  let current: PartialState<NavigationState> | undefined = route?.state;\n  let config: ConfigItem | undefined = normalizedConfig?.screens?.[route?.name];\n  let params: NestedNavigateParams<NavigationState> = { ...route.params };\n\n  let payload = route ? { name: route.name, params } : undefined;\n\n  while (current) {\n    if (current.routes.length === 0) {\n      return undefined;\n    }\n\n    const routes =\n      current.index != null\n        ? current.routes.slice(0, current.index + 1)\n        : current.routes;\n\n    const route: Route<string> | PartialRoute<Route<string>> =\n      routes[routes.length - 1];\n\n    if (routes.length === 1) {\n      params.initial = true;\n      params.screen = route.name;\n      params.state = undefined; // Explicitly set to override existing value when merging params\n    } else if (\n      routes.length === 2 &&\n      routes[0].key === undefined &&\n      routes[0].name === config?.initialRouteName\n    ) {\n      params.initial = false;\n      params.screen = route.name;\n      params.state = undefined;\n    } else {\n      params.initial = undefined;\n      params.screen = undefined;\n      params.params = undefined;\n      params.state = current;\n      break;\n    }\n\n    if (route.state) {\n      params.params = { ...route.params };\n      params = params.params;\n    } else {\n      params.params = route.params;\n    }\n\n    current = route.state;\n    config = config?.screens?.[route.name];\n  }\n\n  if (!payload) {\n    return;\n  }\n\n  // Try to construct payload for a `NAVIGATE` action from the state\n  // This lets us preserve the navigation state and not lose it\n  return {\n    type: 'NAVIGATE',\n    payload,\n  };\n}\n\nconst createNormalizedConfigItem = (config: PathConfig | string) =>\n  typeof config === 'object' && config != null\n    ? {\n        initialRouteName: config.initialRouteName,\n        screens:\n          config.screens != null\n            ? createNormalizedConfigs(config.screens)\n            : undefined,\n      }\n    : {};\n\nconst createNormalizedConfigs = (options: PathConfigMap) =>\n  Object.entries(options).reduce<Record<string, ConfigItem>>((acc, [k, v]) => {\n    acc[k] = createNormalizedConfigItem(v);\n    return acc;\n  }, {});\n"]}